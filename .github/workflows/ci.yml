name: CI Tests

on:
  push:
    branches: [ master, main, develop, v_* ]
  pull_request:
    branches: [ master, main, develop, v_* ]
  schedule:
    # Run full tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  BUILD_TYPE: Release

jobs:
  # Primary test job - covers most common scenarios
  test-primary:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']  # Only test on Python 3.10
        
    name: Tests on Python ${{ matrix.python-version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock pytest-timeout psutil
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Install tiny-torch
      run: pip install -e .
    
    - name: Run all tests
      run: |
        # Skip CUDA tests on CI (no GPU available)
        python -m pytest tests/unit/ tests/integration/ tests/system/ -v --cov=tiny_torch --cov-report=xml -m "not cuda"

  # Extended tests (only run on schedule or specific branches)
  test-extended:
    if: github.event_name == 'schedule' || contains(github.ref, 'main') || contains(github.ref, 'master')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ['3.10']  # Only test on Python 3.10
        
    name: Extended tests on ${{ matrix.os }} Python ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov psutil
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Install tiny-torch
      run: pip install -e .
    
    - name: Run comprehensive tests
      run: |
        # Skip CUDA tests on CI (no GPU available)
        python -m pytest tests/ -v -m "not cuda"

  # Quick lint check (runs on every PR/push)
  lint:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Check formatting and linting
      run: |
        black --check --diff tiny_torch/ tests/ || echo "Black formatting issues found"
        isort --check-only --diff tiny_torch/ tests/ || echo "Import sorting issues found"
        flake8 tiny_torch/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

  # Full test suite (only on main/master branch or schedule)
  test-comprehensive:
    if: github.event_name == 'schedule' || contains(github.ref, 'main') || contains(github.ref, 'master')
    runs-on: ubuntu-latest
    name: Comprehensive Tests
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential gdb
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock pytest-timeout psutil
    
    - name: Configure CMake (with C++ tests)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON -G Ninja
    
    - name: Build (including C++ tests)
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Install tiny-torch
      run: pip install -e .
    
    - name: Run C++ tests
      working-directory: ${{github.workspace}}/build
      run: |
        if [ -f "./test/cpp/tiny_torch_cpp_tests" ]; then
          ./test/cpp/tiny_torch_cpp_tests
        else
          echo "C++ tests not found, skipping"
        fi
    
    - name: Run comprehensive Python tests with coverage
      run: |
        # Skip CUDA tests on CI (no GPU available)  
        python -m pytest tests/ --cov=tiny_torch --cov-report=xml --cov-report=html --cov-fail-under=60 -m "not cuda"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: codecov-comprehensive
