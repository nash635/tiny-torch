name: CI

on:
  push:
    branches: [ master, v_* ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential python3-dev
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        # Verify key dependencies
        python -c "import pybind11; print('pybind11 OK')"
        python -c "import numpy; print('numpy OK')"
    
    - name: Build project
      run: |
        python setup.py build_ext --inplace
        # Alternative: make build
    
    - name: Run tests
      run: |
        pytest test/ -v
    
  build-cpp:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        # Verify critical dependencies
        python -c "import pybind11; print(f'pybind11 version: {pybind11.__version__}')"
        python -c "import pybind11; print(f'pybind11 cmake dir: {pybind11.get_cmake_dir()}')"
        python -c "import numpy; print(f'numpy version: {numpy.__version__}')"
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        # Set pybind11 path explicitly
        export pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")
        cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=OFF -Dpybind11_DIR=$pybind11_DIR
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run C++ tests
      run: |
        cd build
        if [ -f test/cpp/tiny_torch_cpp_tests ]; then
          ./test/cpp/tiny_torch_cpp_tests
        else
          echo "C++ tests binary not found, skipping..."
        fi
